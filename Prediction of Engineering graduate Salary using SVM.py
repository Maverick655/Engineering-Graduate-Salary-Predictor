# -*- coding: utf-8 -*-
"""Day 42: Support Vector Machine (SVR) and Project 2 - Prediction of Engineering graduate Salary using SVR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ciIRw3fChhBuY2GVpb9wdcW71Wr1h3mO

# Importing all the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.svm import SVR
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

"""# Problem Statement

Given a dataset which represents the parameters of an Engineering graduate based on which the salary will be given to him/her. You need to build a model to predict the Engineering graduate salary based on the provided features.

# Importing the dataset

Link: https://drive.google.com/file/d/13fgjGI3uGlnEqefpZ72JsWLqXqveNKo1/view?usp=sharing
"""

df = pd.read_csv('/content/drive/MyDrive/ShapeAI DST 11021 Oct-Jan Batch 2021-22/Datasets/Engineering_graduate_salary.csv')

"""# EDA - Exploratory Data Analysis"""

df.head()

"""# Data Description
ID: A unique ID to identify a candidate

Salary: Annual CTC offered to the candidate (in INR)

Gender: Candidate's gender

DOB: Date of birth of the candidate

10percentage: Overall marks obtained in grade 10 examinations

10board: The school board whose curriculum the candidate followed in grade 10

12graduation: Year of graduation - senior year high school

12percentage: Overall marks obtained in grade 12 examinations

12board: The school board whose curriculum the candidate followed

CollegeID: Unique ID identifying the university/college which the candidate attended for her/his undergraduate

CollegeTier: Each college has been annotated as 1 or 2. The annotations have been computed from the average AMCAT scores obtained by the students in the college/university. Colleges with an average score above a threshold are tagged as 1 and others as 2.

Degree: Degree obtained/pursued by the candidate

Specialization: Specialization pursued by the candidate

CollegeGPA: Aggregate GPA at graduation

CollegeCityID: A unique ID to identify the city in which the college is located in.

CollegeCityTier: The tier of the city in which the college is located in. This is annotated based on the population of the cities.

CollegeState: Name of the state in which the college is located

GraduationYear: Year of graduation (Bachelor's degree)

English: Scores in AMCAT English section

Logical: Score in AMCAT Logical ability section

Quant: Score in AMCAT's Quantitative ability section

Domain: Scores in AMCAT's domain module

ComputerProgramming: Score in AMCAT's Computer programming section

ElectronicsAndSemicon: Score in AMCAT's Electronics & Semiconductor Engineering section

ComputerScience: Score in AMCAT's Computer Science section

MechanicalEngg: Score in AMCAT's Mechanical Engineering section

ElectricalEngg: Score in AMCAT's Electrical Engineering section

TelecomEngg: Score in AMCAT's Telecommunication Engineering section

CivilEngg: Score in AMCAT's Civil Engineering section

conscientiousness: Scores in one of the sections of AMCAT's personality test

agreeableness: Scores in one of the sections of AMCAT's personality test

extraversion: Scores in one of the sections of AMCAT's personality test

nueroticism: Scores in one of the sections of AMCAT's personality test

openesstoexperience: Scores in one of the sections of AMCAT's personality test

"""

df.tail()

df.shape

df.columns

len(df.columns)

df.shape[1]

df.info()

df.isna().sum()

df.isna().sum().sum()

df.head(1)

df.columns

# Removing Columns - ID, CollegeID, CollegeCityID, CollegeCityTier, CollegeState

df.drop(['ID', 'CollegeID', 'CollegeCityID', 'CollegeCityTier', 'CollegeState'], axis=1, inplace=True)

df.head(1)

# 2022-10-7 - 1990-10-22 = Age

# Year, Month, Day

df.DOB[0]

type(df.DOB[0])

df.DOB = pd.to_datetime(df.DOB)

df.DOB[0]

df.DOB[0].year

type(df.DOB[100])

import datetime

def age(data):
  current_date = datetime.date.today()
  return current_date.year - data.year - ((current_date.month, current_date.day) < (data.month, data.day))

datetime.date.today()

# 1990-10-22

# 22 Oct 1990
# 7  Oct 2022

2022 - 1990

31

df['Age'] = df.DOB.apply(lambda x:age(x))

df.head(1)

df.drop('DOB', axis=1, inplace=True)

df.head(1)

Age = df.pop('Age')

df.insert(1, 'Age', Age)

df.head(1)

df.Gender.unique()

df.Gender.value_counts()

enc = LabelEncoder()

df['Gender'] = enc.fit_transform(df['Gender'])

df.Gender.value_counts()

"""m -> 1

f -> 0
"""

df.head(1)

df[df['10percentage']==0]

df['10board'].unique()

df['10board'].nunique()

df['10board'].value_counts()

df.drop(['10board', '12board'], axis=1, inplace=True)

df.head(2)

df[df['12percentage']==0]

df.CollegeTier.unique()

df.CollegeTier.value_counts()

df.Degree.unique()

df.Degree.value_counts()

for i in range(len(df.Degree)):
  if str(df.Degree[i]) =='B.Tech/B.E.':
    df.Degree[i] = 'Bachelors'
  else:
    df.Degree[i] = 'Masters'

df.Degree.value_counts()

df.Degree = enc.fit_transform(df.Degree)

df.Degree.value_counts()

df.Specialization.value_counts()

# df.Specialization.nunique() -> 4

df.head(2)

df.collegeGPA.describe()

df.GraduationYear.describe()

# Mean - ceil(mean(df.GraduationYear)) #2012
# Mode - #2013
# Median - #2013

df.GraduationYear.mode()

int(df.GraduationYear.median())

df.GraduationYear.replace(0, int(df.GraduationYear.median()), inplace=True)

df.GraduationYear.describe()

df.columns

df.English.describe()

df.Logical.describe()

1000

df.Quant.describe()

df.Domain.describe()

# -1 to 1

# 'ComputerProgramming', 'ElectronicsAndSemicon', 'ComputerScience',
#        'MechanicalEngg', 'ElectricalEngg', 'TelecomEngg', 'CivilEngg',
#        'conscientiousness', 'agreeableness', 'extraversion', 'nueroticism',
#        'openess_to_experience'

df.ComputerProgramming.describe()

# -1 to 1000

arr = ['Domain','ComputerProgramming', 'ElectronicsAndSemicon', 'ComputerScience',
       'MechanicalEngg', 'ElectricalEngg', 'TelecomEngg', 'CivilEngg',]

for i in arr:
  df[f'{i}'].replace(-1, np.nan, inplace=True)

df.ComputerProgramming.describe()

# df['Domain_Marks'] =

(485 + 366 + 0 + 0 + 0)/7

(485 + 366)/2

len(df.columns)

# 34 -> 27 -> 21 -> 17 -> 15

# sns.pairplot(df)

df.corr()

plt.figure(figsize=(50,50))
sns.heatmap(df.corr(), annot=True, cmap='Greens')

"""# Machine Learning"""

X = df.drop('Salary', axis=1)
y = df['Salary']

X

y

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=20, random_state=10)

model = SVR(kernel='rbf')

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

r2_score(y_test, y_pred)

model.predict([[_, _, _, ........., _]])

df.columns

df.Specialization.value_counts()